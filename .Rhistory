load_all()
use_r("fbind")
load_all()
library(devtools)
load_all()
conesa_pal
conesa_palettes["main"]
check()
use_mit_license("Pedro Salguero")
document()
load_all()
?conesa_pal
check()
check()
check()
use_package("ggplot2")
importFrom("grDevices", "colorRampPalette")
document()
check()
document()
check()
document()
check()
?ceil
?ceil
document()
?ceil
check()
use_package("Hmisc")
document()
check()
install()
uninstall(colorConesa)
uninstall("colorConesa")
uninstall(pkg = "colorConesa")
library(devtools)
document()
check()
document()
check()
library(devtools)
document()
check()
document()
check()
document()
check()
document()
check()
install()
has_devel()
has_devel()
document()
load_all()
check()
install()
document()
load_all()
check()
install()
document()
load_all()
install()
load_all()
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_conesa(palette = "mixed", guide = "none")
library(ggplot2)
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_conesa(palette = "mixed", guide = "none")
document()
load_all()
check()
install()
library(devtools)
load_all()
lstGreen = c("#15918A", "#62DED8", "#1FDED4", "#48A49F", "#0D5E5A")
lstOrange = c("#F58A53", "#F7BB9E", "#C26D42", "#754228", "#75594B")
lstYellow = c("#FDC659", "#FDDFA4", "#C99E47", "#7D622C", "#7D6E51")
lstBlue = c("#74CDF0", "#BDE3F2", "#5BA1BD", "#366070", "#586970")
lstPurple = c("#9F7BB8", "#9048C3", "#725985", "#302638", "#291538")
lstPink = c("#FDA3D1", "#FD56AC", "#C981A6", "#7D2A55", "#7D5067")
lstMagenta = c("#EE446F", "#F08EA6", "#BA3657", "#6E2033", "#6E414C")
conesa_colors <- c(`green` = "#15918A",
`orange` = "#F58A53",
`yellow` = "#FDC659",
`blue` = "#74CDF0",
`purple` = "#9F7BB8",
`pink` = "#FDA3D1",
`magenta` = "#EE446F")
N <- length(lstOrange) + length(lstGreen) + length(lstYellow) + length(lstPink) + length(lstBlue) + length(lstMagenta) + length(lstPurple)
#' Function to extract conesa colors as hex codes
#'
#' @param ... Character names of conesa_colors
#'
conesa_cols <- function(...) {
cols <- c(...)
if (is.null(cols))
return (conesa_colors)
conesa_colors[cols]
}
#' Return all conesa colors by number of colors you need
#'
#' @param n Number of colors you need
#' @param reverse Boolean indicating whether the palette should be reversed
#'
#' @export
colorConesa <- function(n, reverse = F){
if(N>35){
stop(paste0("colorConesa can manage at maximum of ", N," colors"))
}
res <- NULL
for(i in 1:n){
color <- i %% 7
pos <-  Hmisc::ceil(i/7)
if(color==1){
res <- c(res, lstGreen[pos])
}else if(color==2){
res <- c(res, lstOrange[pos])
}else if(color==3){
res <- c(res, lstYellow[pos])
}else if(color==4){
res <- c(res, lstBlue[pos])
}else if(color==5){
res <- c(res, lstPurple[pos])
}else if(color==6){
res <- c(res, lstPink[pos])
}else if(color==0){
res <- c(res, lstMagenta[pos])
}
}
if(reverse){
return(rev(res))
}else{
return(res)
}
}
#' Conesa color palette
#'
conesa_palettes <- list(
`main`  = conesa_cols("green", "orange", "yellow"),
`nature`= conesa_cols("green", "yellow"),
`cool`  = conesa_cols("blue", "purple"),
`hot`   = conesa_cols("orange", "magenta"),
`warm`  = conesa_cols("magenta", "blue"),
`mixed` = conesa_cols("green", "orange", "yellow", "blue", "pruple", "pink", "magenta")
)
#' Return function to interpolate a conesa color palette
#'
#' @param palette Character name of palette in conesa_palettes
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments to pass to colorRampPalette()
#'
conesa_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- conesa_palettes[[palette]]
if (reverse) pal <- rev(pal)
grDevices::colorRampPalette(pal, ...)
}
#' Color scale constructor for conesa colors
#'
#' @param palette Character name of palette in conesa_palettes c("main", "cool", "warm", "hot", "nature", "mixed") are avairable.
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_color_gradientn(), used respectively when discrete is TRUE or FALSE
#'
#' @export
scale_color_conesa <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- conesa_pal(palette = palette, reverse = reverse)
if (discrete) {
ggplot2::discrete_scale("colour", paste0("conesa_", palette), palette = pal, ...)
} else {
ggplot2::scale_color_gradientn(colours = pal(256), ...)
}
}
#' Fill scale constructor for conesa colors
#'
#' @param palette Character name of palette in conesa_palettes c("main", "cool", "warm", "hot", "nature", "mixed") are avairable.
#' @param discrete Boolean indicating whether color aesthetic is discrete or not
#' @param reverse Boolean indicating whether the palette should be reversed
#' @param ... Additional arguments passed to discrete_scale() or
#'            scale_fill_gradientn(), used respectively when discrete is TRUE or FALSE
#'
#' @export
scale_fill_conesa <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- conesa_pal(palette = palette, reverse = reverse)
if(discrete){
ggplot2::discrete_scale("fill", paste0("conesa_", palette), palette = pal, ...)
}else{
ggplot2::scale_fill_gradientn(colours = pal(256), ...)
}
}
load_all()
load_all()
# color easy
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_conesa(palette = "cool")
library(devtools)
library(ggplot2)
# color easy
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Species)) +
geom_point(size = 4) +
scale_color_conesa(palette = "cool")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "main")
# Fill by discrete variable with different palette + remove legend (guide)
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_conesa(palette = "main", guide = "none")
document()
check()
install()
# Fill by discrete variable with different palette + remove legend (guide)
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_conesa(palette = "main", guide = "none")
detach("package:RColorConesa", unload = TRUE)
# Fill by discrete variable with different palette + remove legend (guide)
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_conesa(palette = "main", guide = "none")
library(RColorConesa)
# Fill by discrete variable with different palette + remove legend (guide)
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_conesa(palette = "main", guide = "none")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "main")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "cold")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "cool")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "warm")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "hot")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "cold")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "nature")
# Color by numeric variable with cool palette
ggplot(iris, aes(Sepal.Width, Sepal.Length, color = Sepal.Length)) +
geom_point(size = 4, alpha = .6) +
scale_color_conesa(discrete = FALSE, palette = "main")
# Fill by discrete variable with different palette + remove legend (guide)
ggplot(mpg, aes(manufacturer, fill = manufacturer)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_conesa(palette = "main", guide = "none")
colorConesa()
colorConesa(1)
colorConesa(2)
colorConesa(6)
colorConesa(35)
colorConesa(90)
mpg
check()
load_all()
document()
install()
sum(length(lstGreen), length(lstOrange), length(lstYellow), length(lstBlue), length(lstPurple), length(lstPink), length(lstMagenta))
lstGreen = c("#15918A", "#62DED8", "#1FDED4", "#48A49F", "#0D5E5A")
lstOrange = c("#F58A53", "#F7BB9E", "#C26D42", "#754228", "#75594B")
lstYellow = c("#FDC659", "#FDDFA4", "#C99E47", "#7D622C", "#7D6E51")
lstBlue = c("#74CDF0", "#BDE3F2", "#5BA1BD", "#366070", "#586970")
lstPurple = c("#9F7BB8", "#9048C3", "#725985", "#302638", "#291538")
lstPink = c("#FDA3D1", "#FD56AC", "#C981A6", "#7D2A55", "#7D5067")
lstMagenta = c("#EE446F", "#F08EA6", "#BA3657", "#6E2033", "#6E414C")
sum(length(lstGreen), length(lstOrange), length(lstYellow), length(lstBlue), length(lstPurple), length(lstPink), length(lstMagenta))
load_all()
check()
document()
install()
tappas_normalize <- function(data, length, factors) {
cat("\nProcessing ", nrow(data), " transcript expression data rows")
factors[,1] = as.factor(factors[,1])
data_object = readData(data = data, length = length, factors = factors)
nlengths = as.vector(as.matrix(data_object@featureData@data))
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
cat("\nReturning ", nrow(dataNormalized), " transcript expression data rows after normalization.")
return(dataNormalized)
}
setwd("D:/Pedro/Archivos/Mega/CIPF/tappAS/RPojects/NormAndFilter")
srcfile = "combined_quant.tsv"
expfile = "exp_factors.txt"
dstfile = "output.txt"
# read data files
cat("\nReading input matrix file data...")
inputMatrix=read.table(srcfile, row.names=1, sep="\t", header=TRUE)
cat("\nRead ", nrow(inputMatrix), " transcripts expression data rows")
cat("\nReading factors file data...")
myfactors=read.table(expfile, row.names=1, sep="\t", header=TRUE)
cat("\nReading transcript length file data...")
translenfile = "structural_info.tsv"
mylengths=read.table(translenfile, row.names=1, sep="\t", header=FALSE)
mylengths=as.vector(mylengths)
# process transcripts
cat("\nNormalizing input matrix...\n")
results = tappas_normalize(data=inputMatrix, length=mylengths, factors=myfactors)
translenfile = "transcript_lengths.tsv"
mylengths=read.table(translenfile, row.names=1, sep="\t", header=FALSE)
mylengths=as.vector(mylengths)
# process transcripts
cat("\nNormalizing input matrix...\n")
results = tappas_normalize(data=inputMatrix, length=mylengths, factors=myfactors)
library("MASS")
library("NOISeq")
results = tappas_normalize(data=inputMatrix, length=mylengths, factors=myfactors)
data=inputMatrix
length=mylengths
factors=myfactors
cat("\nProcessing ", nrow(data), " transcript expression data rows")
factors[,1] = as.factor(factors[,1])
factors[,1]
data_object = readData(data = data, length = length, factors = factors)
data_object
nlengths = as.vector(as.matrix(data_object@featureData@data))
nlengths
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dataNormalized
cat("\nReturning ", nrow(dataNormalized), " transcript expression data rows after normalization.")
?tmm
length
head(length)
data
data["Isoform_12528_563",]
data["Isoform_56340_8",]
assayData(data_object)$exprs
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0.00001, lc = 0)
dataNormalized
dim(dataNormalized)
dim(dataa)
dim(data)
dataNormalized = tmm(assayData(data_object)$exprs, long = 1000, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dim(dataNormalized)
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 7, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dataNormalized
dim(dataNormalized)
assayData(data_object)$exprs
factors
nlengths
data_object = readData(data = data, length = length, factors = factors)
data_object@featureData@data
data_object@featureData
data_object@featureData@•data
data_object@featureData@data
factors
expfile = "time_factors.txt"
myfactors=read.table(expfile, row.names=1, sep="\t", header=TRUE)
myfactors
factors=myfactors
cat("\nProcessing ", nrow(data), " transcript expression data rows")
factors[,1] = as.factor(factors[,1])
data_object = readData(data = data, length = length, factors = factors)
nlengths = as.vector(as.matrix(data_object@featureData@data))
nlengths
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dim(dataNormalized)
tmm(assayData(data_object)$exprs)
dim(tmm(assayData(data_object)$exprs))
assayData(data_object)$exprs
colnames(assayData(data_object)$exprs)
aux <- rnorm(n = dim(data))
aux
aux <- rnorm(n = dim(data)[1]*dim(data)[2])
aux
aux <- rnorm(n = dim(data)[1]*dim(data)[2])data
data
inputMatrix=read.table(srcfile, row.names=1, sep="\t", header=TRUE)
inputMatrix
srcfile = "combined_quant.tsv"
inputMatrix=read.table(srcfile, row.names=1, sep="\t", header=TRUE)
colnames(inputMatrix)
srcfile = "input_matrix.tsv"
inputMatrix=read.table(srcfile, row.names=1, sep="\t", header=TRUE)
colnames(inputMatrix)
myfactors=read.table(expfile, row.names=1, sep="\t", header=TRUE)
cat("\nReading transcript length file data...")
mylengths=read.table(translenfile, row.names=1, sep="\t", header=FALSE)
mylengths=as.vector(mylengths)
# process transcripts
cat("\nNormalizing input matrix...\n")
data=inputMatrix
length=mylengths
factors=myfactors
expfile = "exp_factors.txt"
translenfile = "transcript_lengths.tsv"
dstfile = "output.txt"
# read data files
cat("\nReading input matrix file data...")
inputMatrix=read.table(srcfile, row.names=1, sep="\t", header=TRUE)
cat("\nRead ", nrow(inputMatrix), " transcripts expression data rows")
cat("\nReading factors file data...")
myfactors=read.table(expfile, row.names=1, sep="\t", header=TRUE)
cat("\nReading transcript length file data...")
mylengths=read.table(translenfile, row.names=1, sep="\t", header=FALSE)
mylengths=as.vector(mylengths)
# process transcripts
cat("\nNormalizing input matrix...\n")
data=inputMatrix
length=mylengths
factors=myfactors
cat("\nProcessing ", nrow(data), " transcript expression data rows")
factors[,1] = as.factor(factors[,1])
data_object = readData(data = data, length = length, factors = factors)
nlengths = as.vector(as.matrix(data_object@featureData@data))
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dim(dataNormalized)
assayData(data_object)$exprs
tmm(assayData(data_object)$exprs)
data
any(apply(data,1,function(x){all.equal(target = )
?all.equal
?all.equal
any(apply(data,1,function(x){sum(x)>0)==0)
any(apply(data,1,function(x){sum(x)>0})==0)
any(apply(data,1,function(x){sum(x)>0})
apply(data,1,function(x){sum(x)>0})
apply(data,1,function(x){sum(x)})
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
tmm
tmm(data)
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dataNormalized = rpkm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dataNormalized = rpkm(assayData(data_object)$exprs, long = nlengths, k = 0, lc = 0)
dataNormalized
#reference column
norm_data <- apply(data, 2, function(x){x/(sum(x))})
norm_data
data$Index10
data[data==0,]
data==0
data[data==0,]
data[data==0]
data[data==0] <- 0.0001
data$Index10
cat("\nProcessing ", nrow(data), " transcript expression data rows")
factors[,1] = as.factor(factors[,1])
data_object = readData(data = data, length = length, factors = factors)
nlengths = as.vector(as.matrix(data_object@featureData@data))
#reference column
norm_data <- data[data==0,]
norm_data
data
dataNormalized = tmm(assayData(data_object)$exprs, long = nlengths, refColumn = 1, logratioTrim = 0.3, sumTrim = 0.05, k = 0, lc = 0)
dataNormalized
dim(dataNormalized)
inputMatrix=read.table(srcfile, row.names=1, sep="\t", header=TRUE)
cat("\nRead ", nrow(inputMatrix), " transcripts expression data rows")
cat("\nReading factors file data...")
myfactors=read.table(expfile, row.names=1, sep="\t", header=TRUE)
cat("\nReading transcript length file data...")
mylengths=read.table(translenfile, row.names=1, sep="\t", header=FALSE)
mylengths=as.vector(mylengths)
# process transcripts
cat("\nNormalizing input matrix...\n")
data=inputMatrix
data
colSums(data)
colSums(data)==0
which(colSums(data)==0)
data[,!which(colSums(data)==0)]
data[,!which(colSums(data)==0)]
data
data[,which(colSums(data)==0)]
data[,-which(colSums(data)==0)]
data2 <- data[,-which(colSums(data)==0)]
tmm(data2)
